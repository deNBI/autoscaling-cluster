
- name: Install mysql packages
  apt:
    name: ["mariadb-server"]
    state: latest

- name: Creates directory
  file:
    path: "{{ autoscaling_home }}"
    state: directory
  become_user: "{{ autoscaling_user }}"


# =============
- name: check if password file exist
  stat:
    path: /root/.my.cnf
  register: root_password_set

- name: Reset root PW
  ansible.builtin.shell: sudo mysql -u root --execute='ALTER USER 'root'@'localhost' IDENTIFIED BY "{{ scheduler_config.storage_root }}";'
  args:
    executable: /bin/bash
  when: root_password_set.stat.exists == False

# ---------------------
- name: Set mysql/my.cnf.j2 file
  template: src=../templates/mysql/my.cnf.j2 dest=/root/.my.cnf mode=0600

# ---------------------
- name: Install pip package pymysql
  pip:
    name: [pymysql]
    state: present
    virtualenv: "{{ autoscaling_home }}/{{ autoscaling_env }}"
  become_user: "{{ autoscaling_user }}"

- name: set ansible_python_interpreter
  set_fact: ansible_python_interpreter="{{ autoscaling_home }}/{{ autoscaling_env }}/bin/python"
  tags:
    - mariadb

# ---------------------
- name: Sets the root password
  mysql_user: user=root password="{{ scheduler_config.storage_root }}" host=localhost
  tags:
    - mariadb
  when: root_password_set.stat.exists == False

- name: Deletes anonymous MySQL server user for localhost
  mysql_user: user="" state="absent"
  when: root_password_set.stat.exists == False

- name: Secures the MySQL root user for IPV6 localhost (::1)
  mysql_user: user="root" password="{{ scheduler_config.storage_root }}" host="::1"
  when: root_password_set.stat.exists == False

- name: Secures the MySQL root user for IPV4 localhost (127.0.0.1)
  mysql_user: user="root" password="{{ scheduler_config.storage_root }}" host="127.0.0.1"
  when: root_password_set.stat.exists == False

- name: Secures the MySQL root user for localhost domain (localhost)
  mysql_user: user="root" password="{{ scheduler_config.storage_root }}" host="localhost"
  when: root_password_set.stat.exists == False

- name: Secures the MySQL root user for server_hostname domain
  mysql_user: user="root" password="{{ scheduler_config.storage_root }}" host="{{ansible_nodename}}"
  when: root_password_set.stat.exists == False

- name: Removes the MySQL test database
  mysql_db: db=test state=absent
  when: root_password_set.stat.exists == False

# =============

- name: Ensure mysql is running and starts on boot
  service: name=mysql state=started enabled=true

# https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_db_module.html
- name: Create a new database with name 'slurm_acct_db'
  become: true
  community.mysql.mysql_db:
    check_implicit_admin: yes
    login_user: root
    login_password: "{{ scheduler_config.storage_root }}"
    name: slurm_acct_db
    state: present

# https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_user_module.html
- name: Create database user with name 'slurm' and database privileges
  community.mysql.mysql_user:
    check_implicit_admin: yes
    login_user: root
    login_password: "{{ scheduler_config.storage_root }}"
    name: slurm
    password: "{{ scheduler_config.storage_pass }}"
    priv:
          'slurm_acct_db.*': 'ALL,GRANT'
    state: present

- name: (Re-)start mysql master
  systemd:
    name: mysql
    enabled: True
    state: restarted
  when: slurmdb_conf is changed

